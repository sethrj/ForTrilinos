@article{morris_exploring_2012,
	title = {Exploring {Capabilities} within {ForTrilinos} by {Solving} the {3D} {Burgers} {Equation}},
	volume = {20},
	issn = {1058-9244, 1875-919X},
	url = {http://www.hindawi.com/journals/sp/2012/378791/},
	doi = {10.1155/2012/378791},
	abstract = {We present the ﬁrst three-dimensional, partial differential equation solver to be built atop the recently released, open-source ForTrilinos package (http://trilinos.sandia.gov/packages/fortrilinos). ForTrilinos currently provides portable, objectoriented Fortran 2003 interfaces to the C++ packages Epetra, AztecOO and Pliris in the Trilinos library and framework [ACM Trans. Math. Softw. 31(3) (2005), 397–423]. Epetra provides distributed matrix and vector storage and basic linear algebra calculations. Pliris provides direct solvers for dense linear systems. AztecOO provides iterative sparse linear solvers. We demonstrate how to build a parallel application that encapsulates the Message Passing Interface (MPI) without requiring the user to make direct calls to MPI except for startup and shutdown. The presented example demonstrates the level of effort required to set up a high-order, ﬁnite-difference solution on a Cartesian grid. The example employs an abstract data type (ADT) calculus [Sci. Program. 16(4) (2008), 329–339] that empowers programmers to write serial code that lower-level abstractions resolve into distributed-memory, parallel implementations. The ADT calculus uses compilable Fortran constructs that resemble the mathematical formulation of the partial differential equation of interest.},
	language = {en},
	number = {3},
	urldate = {2019-02-04},
	journal = {Scientific Programming},
	author = {Morris, Karla and Rouson, Damian W.I. and Lemaster, M. Nicole and Filippone, Salvatore},
	year = {2012},
	pages = {275--292},
	file = {Morris et al. - 2012 - Exploring Capabilities within ForTrilinos by Solvi.pdf:/Users/s3j/Zotero/storage/5H2E8DPW/Morris et al. - 2012 - Exploring Capabilities within ForTrilinos by Solvi.pdf:application/pdf}
}

@techreport{muszala_babel_2008,
	title = {Babel {Fortran} 2003 binding for structured data types},
	abstract = {Babel is a tool aimed at the high-performance computing community that addresses the need for mixing programming languages (Java, Python, C, C++, Fortran 90, FORTRAN 77) in order to leverage the speciﬁc beneﬁts of those languages. Scientiﬁc codes often rely on structured data types (structs, derived data types) to encapsulate data, and Babel has been lacking in this type of support until recently. We present a new language binding that focuses on their interoperability of C/C++ with Fortran 2003. The new binding builds on the existing Fortran 90 infrastructure by using the iso c binding module deﬁned in the Fortran 2003 standard as the basis for C/C++ interoperability. We present the technical approach for the new binding and discuss our initial experiences in applying the binding in FACETS (Framework Application for Core-Edge Transport Simulations) to integrate C++ with legacy Fortran codes.},
	language = {en},
	number = {LLNL-CONF-403478},
	institution = {Lawrence Livermore National Laboratory},
	author = {Muszala, Stefan and Epperly, Tom and Wang, Nanbor},
	month = may,
	year = {2008},
	pages = {11},
	file = {Muszala et al. - Babel Fortran 2003 binding for structured data typ.pdf:/Users/s3j/Zotero/storage/UKUSUVD5/Muszala et al. - Babel Fortran 2003 binding for structured data typ.pdf:application/pdf}
}

@article{beazley_automated_2003,
	title = {Automated scientific software scripting with {SWIG}},
	volume = {19},
	issn = {0167739X},
	url = {http://linkinghub.elsevier.com/retrieve/pii/S0167739X02001711},
	doi = {10.1016/S0167-739X(02)00171-1},
	abstract = {Scripting languages such as Python and Tcl are a powerful tool for the construction of ﬂexible scientiﬁc software because they provide scientists with an interpreted problem solving environment and they provide a modular framework for controlling software components written in C, C++, and Fortran. However, a common problem faced by the developers of a scripted scientiﬁc application is that of integrating compiled code with an interpreter. To solve this problem, an extensible compiler, simpliﬁed wrapper and interface generator (SWIG), has been developed to automate the task of integrating compiled code with scripting language interpreters. SWIG requires no modiﬁcations to existing code and uses existing source to create bindings for nine different target languages including Python, Perl, Tcl, Ruby, Guile, and Java. By automating language integration, SWIG enables scientists to use scripting languages at all stages of software development and allows existing software to be more easily integrated into a scripting environment. Although SWIG has been in use for more than 6 years, little has been published on its design and the underlying mechanisms that make it work. Therefore, the primary goal of this paper is to cover these topics.},
	language = {en},
	number = {5},
	urldate = {2018-09-06},
	journal = {Future Generation Computer Systems},
	author = {Beazley, D.M.},
	month = jul,
	year = {2003},
	pages = {599--609},
	file = {Beazley - 2003 - Automated scientific software scripting with SWIG.pdf:/Users/s3j/Zotero/storage/LKCUYK6D/Beazley - 2003 - Automated scientific software scripting with SWIG.pdf:application/pdf}
}

@article{rouson_this_2012,
	title = {This {Isn}'t {Your} {Parents}' {Fortran}: {Managing} {C}++ {Objects} with {Modern} {Fortran}},
	volume = {14},
	issn = {1521-9615},
	shorttitle = {This {Isn}'t {Your} {Parents}' {Fortran}},
	url = {http://ieeexplore.ieee.org/document/6159199/},
	doi = {10.1109/MCSE.2012.33},
	language = {en},
	number = {2},
	urldate = {2019-08-07},
	journal = {Computing in Science \& Engineering},
	author = {Rouson, Damian and Morris, Karla and Xia, Jim},
	month = mar,
	year = {2012},
	pages = {46--54},
	file = {Rouson et al. - 2012 - This Isn't Your Parents' Fortran Managing C++ Obj.pdf:/Users/s3j/Zotero/storage/AUPVNXL5/Rouson et al. - 2012 - This Isn't Your Parents' Fortran Managing C++ Obj.pdf:application/pdf;Rouson et al. - 2012 - This Isn't Your Parents' Fortran Managing C++ Obj.pdf:/Users/s3j/Zotero/storage/6BVQNZEU/Rouson et al. - 2012 - This Isn't Your Parents' Fortran Managing C++ Obj.pdf:application/pdf}
}

@techreport{wg5_further_2012,
	title = {Further {Interoperability} of {Fortran} with {C}},
	language = {en},
	number = {TS 29113},
	institution = {ISO},
	author = {{WG5}},
	year = {2012},
	pages = {62},
	file = {Further Interoperability of Fortran with C.pdf:/Users/s3j/Zotero/storage/3L3TL5GW/Further Interoperability of Fortran with C.pdf:application/pdf}
}

@techreport{prokopenko_fortrilinos_2021,
	title = {{ForTrilinos} 2: idiomatic {Fortran} bindings to {Trilinos}},
	number = {ORNL/TM-2021/XXX},
	institution = {Oak Ridge National Laboratory},
	author = {Prokopenko, Andrey V. and Johnson, Seth R. and Evans, Katherine J.},
	year = {2021}
}

@article{mcinnes_how_2021,
	title = {How community software ecosystems can unlock the potential of exascale computing},
	volume = {1},
	issn = {2662-8457},
	url = {http://www.nature.com/articles/s43588-021-00033-y},
	doi = {10.1038/s43588-021-00033-y},
	language = {en},
	number = {2},
	urldate = {2021-05-22},
	journal = {Nature Computational Science},
	author = {McInnes, Lois Curfman and Heroux, Michael A. and Draeger, Erik W. and Siegel, Andrew and Coghlan, Susan and Antypas, Katie},
	month = feb,
	year = {2021},
	pages = {92--94},
	file = {McInnes et al. - 2021 - How community software ecosystems can unlock the p.pdf:/Users/s3j/Zotero/storage/T5G46MCK/McInnes et al. - 2021 - How community software ecosystems can unlock the p.pdf:application/pdf}
}

@article{johnson_automated_2020,
	title = {Automated {Fortran}-{C}++ {Bindings} for {Large}-{Scale} {Scientific} {Applications}},
	volume = {22},
	issn = {1521-9615, 1558-366X},
	url = {https://ieeexplore.ieee.org/document/8745480/},
	doi = {10.1109/MCSE.2019.2924204},
	abstract = {Although many active scientiﬁc codes use modern Fortran, most contemporary scientiﬁc software libraries are implemented in C and C++. Providing their numerical, algorithmic, or data management features to Fortran codes requires writing and maintaining substantial amounts of glue code. This article introduces a tool that automatically generates native Fortran 2003 interfaces to C and C++ libraries. The tool supports C++ features that have no direct Fortran analog, such as templated functions and exceptions. A set of simple examples demonstrate the utility and scope of the tool, and timing measurements with a mock numerical library illustrate the minimal performance impact of the generated wrapper code.},
	language = {en},
	number = {5},
	urldate = {2019-08-20},
	journal = {Computing in Science \& Engineering},
	author = {Johnson, Seth R. and Prokopenko, Andrey and Evans, Katherine J.},
	month = oct,
	year = {2020},
	pages = {84--94},
	file = {Johnson et al. - 2020 - Automated Fortran-C++ Bindings for Large-Scale Sci.pdf:/Users/s3j/Zotero/storage/IDWGIGJQ/Johnson et al. - 2020 - Automated Fortran-C++ Bindings for Large-Scale Sci.pdf:application/pdf}
}

@misc{prokopenko_fortrilinos_2017,
	title = {{ForTrilinos}},
	url = {https://www.osti.gov/biblio/1430227},
	author = {Prokopenko, Andrey V. and Johnson, Seth R. and Bement, Matt and Fuller, Tim and Young, Mitchell},
	collaborator = {Evans, Katherine J. and Heroux, Mike},
	year = {2017},
	doi = {10.11578/dc.20200518.18}
}
