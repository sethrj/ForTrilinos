/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Copyright 2017-2020, UT-Battelle, LLC
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * License-Filename: LICENSE
 */


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* qualifier for exported *const* global data variables*/
#ifndef SWIGEXTERN
# ifdef __cplusplus
#   define SWIGEXTERN extern
# else
#   define SWIGEXTERN
# endif
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
 { throw std::logic_error("In " DECL ": " MSG); }


extern "C" {
void SWIG_check_unhandled_exception_impl(const char* decl);
void SWIG_store_exception(const char* decl, int errcode, const char *msg);
}


#undef SWIG_exception_impl
#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
    SWIG_store_exception(DECL, CODE, MSG); RETURNNULL;


enum SwigMemFlags {
    SWIG_MEM_OWN = 0x01,
    SWIG_MEM_RVALUE = 0x02,
    SWIG_MEM_CONST = 0x04
};


#define SWIG_check_mutable(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    if ((SWIG_CLASS_WRAPPER).cmemflags & SWIG_MEM_CONST) { \
        SWIG_exception_impl(FUNCNAME, SWIG_TypeError, \
            "Cannot pass const " TYPENAME " (class " FNAME ") " \
            "as a mutable reference", \
            RETURNNULL); \
    }


#define SWIG_check_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(SWIG_CLASS_WRAPPER).cptr) { \
    SWIG_exception_impl(FUNCNAME, SWIG_TypeError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }


#define SWIG_check_mutable_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    SWIG_check_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL); \
    SWIG_check_mutable(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL);


namespace swig {
enum AssignmentType {
  ASSIGNMENT_DEFAULT,
  ASSIGNMENT_NODESTRUCT,
  ASSIGNMENT_SMARTPTR
};
}


#define SWIG_check_sp_nonnull(INPUT, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(INPUT)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_TypeError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }

#define SWIG_constsp_mem_flags SWIG_MEM_CONST
#define SWIG_sp_mem_flags 0


#define SWIGPOLICY_Teuchos__ArrayT_int_t swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_Teuchos__ArrayT_double_t swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_Teuchos__ArrayT_long_long_t swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_Teuchos__CommT_int_t swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_Teuchos__ParameterList swig::ASSIGNMENT_SMARTPTR

#include <stdexcept>


/* Support for the `contract` feature.
 *
 * Note that RETURNNULL is first because it's inserted via a 'Replaceall' in
 * the fortran.cxx file.
 */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
 if (!(EXPR)) { SWIG_exception_impl("$decl", SWIG_ValueError, MSG, RETURNNULL); } 


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <string>


#include "ForTrilinos_config.h"


#include <Teuchos_BLAS_types.hpp>
#include <Teuchos_DataAccess.hpp>


#include <Teuchos_Exceptions.hpp>


#include <Teuchos_RCP.hpp>


#include <Teuchos_ArrayView.hpp>


#include <Teuchos_ArrayRCP.hpp>


#include <Teuchos_Array.hpp>


struct SwigClassWrapper {
    void* cptr;
    int cmemflags;
};


SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized() {
    SwigClassWrapper result;
    result.cptr = NULL;
    result.cmemflags = 0;
    return result;
}


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


struct SwigArrayWrapper {
    void* data;
    size_t size;
};


SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized() {
  SwigArrayWrapper result;
  result.data = NULL;
  result.size = 0;
  return result;
}

SWIGINTERN Teuchos::ArrayView< int > Teuchos_Array_Sl_int_Sg__view(Teuchos::Array< int > *self){
            return (*self)();
        }

namespace swig {

template<class T, AssignmentType A>
struct DestructorPolicy {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    delete static_cast<T*>(self.cptr);
    return SwigClassWrapper_uninitialized();
  }
};
template<class T>
struct DestructorPolicy<T, ASSIGNMENT_NODESTRUCT> {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    SWIG_exception_impl("assignment", SWIG_TypeError, "Invalid assignment: class type has private destructor", return SwigClassWrapper_uninitialized());
  }
};
}


namespace swig {

template<class T, AssignmentType A>
struct AssignmentPolicy {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    return DestructorPolicy<T, A>::destruct(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = other.cptr;
    self.cmemflags = other.cmemflags & ~SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destruct(self);
    }
    self.cptr = other.cptr;
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destruct(self);
    }
    self.cptr = other.cptr;
    self.cmemflags = other.cmemflags & ~SWIG_MEM_OWN;
    return self;
  }
};

template<class T>
struct AssignmentPolicy<T, ASSIGNMENT_SMARTPTR> {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    return DestructorPolicy<T, ASSIGNMENT_SMARTPTR>::destruct(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = new T(*static_cast<T*>(other.cptr));
    self.cmemflags = other.cmemflags | SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    self = copy_alias(self, other);
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    destruct(other);
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    // LHS and RHS should both 'own' their shared pointers
    T *pself = static_cast<T*>(self.cptr);
    T *pother = static_cast<T*>(other.cptr);
    *pself = *pother;
    return self;
  }
};

} // end namespace swig

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_assign(SwigClassWrapper* self, SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;

  if (self->cptr == NULL) {
    /* LHS is unassigned */
    if (other.cmemflags & SWIG_MEM_RVALUE) {
      /* Capture pointer from RHS, clear 'moving' flag */
      self->cptr = other.cptr;
      self->cmemflags = other.cmemflags & (~SWIG_MEM_RVALUE);
    } else {
      /* Aliasing another class; clear ownership or copy smart pointer */
      *self = Policy_t::alias(other);
    }
  } else if (other.cptr == NULL) {
    /* Replace LHS with a null pointer */
    *self = Policy_t::destruct(*self);
  } else if (other.cmemflags & SWIG_MEM_RVALUE) {
    /* Transferred ownership from a variable that's about to be lost.
     * Move-assign and delete the transient data */
    *self = Policy_t::move_alias(*self, other);
  } else {
    /* RHS shouldn't be deleted, alias to LHS */
    *self = Policy_t::copy_alias(*self, other);
  }
}

SWIGINTERN Teuchos::ArrayView< double > Teuchos_Array_Sl_double_Sg__view(Teuchos::Array< double > *self){
            return (*self)();
        }
SWIGINTERN Teuchos::ArrayView< long long > Teuchos_Array_Sl_long_SS_long_Sg__view(Teuchos::Array< long long > *self){
            return (*self)();
        }

#include <Teuchos_Comm.hpp>
#if FORTRILINOS_USE_MPI
# include "Teuchos_DefaultMpiComm.hpp"
#else
  typedef int MPI_Comm;
#endif
#include <Teuchos_DefaultSerialComm.hpp>

SWIGINTERN Teuchos::Comm< int > *new_Teuchos_Comm_Sl_int_Sg___SWIG_0(MPI_Comm rawMpiComm){
#if FORTRILINOS_USE_MPI
      return new Teuchos::MpiComm<int>(rawMpiComm);
#else
      throw std::runtime_error("MPI based constructor cannot be called when MPI is not enabled.");
#endif
    }

#define SWIG_NO_NULL_DELETER_0 , Teuchos::RCP_WEAK_NO_DEALLOC
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN Teuchos::Comm< int > *new_Teuchos_Comm_Sl_int_Sg___SWIG_1(){
#if FORTRILINOS_USE_MPI
      return new Teuchos::MpiComm<int>(MPI_COMM_WORLD);
#else
      return new Teuchos::SerialComm<int>();
#endif
    }
SWIGINTERN MPI_Comm Teuchos_Comm_Sl_int_Sg__getRawMpiComm(Teuchos::Comm< int > *self){
#if FORTRILINOS_USE_MPI
      Teuchos::MpiComm<int>& comm = dynamic_cast<Teuchos::MpiComm<int>&>(*self);
      return *comm.getRawMpiComm();
#else
      throw std::runtime_error("MPI based constructor cannot be called when MPI is not enabled.");
#endif
    }

#include <Teuchos_ParameterList.hpp>


#include <Teuchos_XMLParameterListCoreHelpers.hpp>


void load_from_xml(const Teuchos::RCP<Teuchos::ParameterList>& plist,
                   const std::string& xml_path)
{
    Teuchos::updateParametersFromXmlFile(xml_path, Teuchos::inOutArg(*plist));
}

void save_to_xml(const Teuchos::ParameterList& plist,
                 const std::string& xml_path)
{
    Teuchos::writeParameterListToXmlFile(plist, xml_path);
}

extern "C" {
SWIGEXPORT SwigClassWrapper _wrap_new_TeuchosArrayInt(SwigArrayWrapper *farg1) {
  SwigClassWrapper fresult ;
  Teuchos::ArrayView< int const > *arg1 = 0 ;
  Teuchos::ArrayView< int const > tmpview1 ;
  Teuchos::Array< int > *result = 0 ;
  
  tmpview1 = Teuchos::ArrayView<int const>(static_cast<int const*>(farg1->data), farg1->size);
  arg1 = &tmpview1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Array< int >::Array(Teuchos::ArrayView< int const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int > *)new Teuchos::Array< int >((Teuchos::ArrayView< int const > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< int >::Array(Teuchos::ArrayView< int const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< int >::Array(Teuchos::ArrayView< int const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Array< int >::Array(Teuchos::ArrayView< int const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TeuchosArrayInt_view(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::ArrayView< int > result;
  
  SWIG_check_mutable_nonnull(*farg1, "Teuchos::Array< int > *", "TeuchosArrayInt", "Teuchos::Array< int >::view()", return SwigArrayWrapper_uninitialized());
  arg1 = static_cast< Teuchos::Array< int > * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Array< int >::view()");;
    try
    {
      // Attempt the wrapped function call
      result = Teuchos_Array_Sl_int_Sg__view(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< int >::view()", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< int >::view()", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Array< int >::view()", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (void*)(&result)->getRawPtr();
  fresult.size = (&result)->size();
  return fresult;
}


SWIGEXPORT void _wrap_delete_TeuchosArrayInt(SwigClassWrapper *farg1) {
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  
  SWIG_check_mutable(*farg1, "Teuchos::Array< int > *", "TeuchosArrayInt", "Teuchos::Array< int >::~Array()", return );
  arg1 = static_cast< Teuchos::Array< int > * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Array< int >::~Array()");;
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< int >::~Array()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< int >::~Array()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Array< int >::~Array()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TeuchosArrayInt_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::Array< int > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<Teuchos::Array< int >, SWIGPOLICY_Teuchos__ArrayT_int_t>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_TeuchosArrayDbl(SwigArrayWrapper *farg1) {
  SwigClassWrapper fresult ;
  Teuchos::ArrayView< double const > *arg1 = 0 ;
  Teuchos::ArrayView< double const > tmpview1 ;
  Teuchos::Array< double > *result = 0 ;
  
  tmpview1 = Teuchos::ArrayView<double const>(static_cast<double const*>(farg1->data), farg1->size);
  arg1 = &tmpview1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Array< double >::Array(Teuchos::ArrayView< double const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double > *)new Teuchos::Array< double >((Teuchos::ArrayView< double const > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< double >::Array(Teuchos::ArrayView< double const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< double >::Array(Teuchos::ArrayView< double const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Array< double >::Array(Teuchos::ArrayView< double const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TeuchosArrayDbl_view(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::ArrayView< double > result;
  
  SWIG_check_mutable_nonnull(*farg1, "Teuchos::Array< double > *", "TeuchosArrayDbl", "Teuchos::Array< double >::view()", return SwigArrayWrapper_uninitialized());
  arg1 = static_cast< Teuchos::Array< double > * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Array< double >::view()");;
    try
    {
      // Attempt the wrapped function call
      result = Teuchos_Array_Sl_double_Sg__view(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< double >::view()", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< double >::view()", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Array< double >::view()", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (void*)(&result)->getRawPtr();
  fresult.size = (&result)->size();
  return fresult;
}


SWIGEXPORT void _wrap_delete_TeuchosArrayDbl(SwigClassWrapper *farg1) {
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  
  SWIG_check_mutable(*farg1, "Teuchos::Array< double > *", "TeuchosArrayDbl", "Teuchos::Array< double >::~Array()", return );
  arg1 = static_cast< Teuchos::Array< double > * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Array< double >::~Array()");;
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< double >::~Array()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< double >::~Array()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Array< double >::~Array()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TeuchosArrayDbl_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::Array< double > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<Teuchos::Array< double >, SWIGPOLICY_Teuchos__ArrayT_double_t>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_TeuchosArrayLongLong(SwigArrayWrapper *farg1) {
  SwigClassWrapper fresult ;
  Teuchos::ArrayView< long long const > *arg1 = 0 ;
  Teuchos::ArrayView< long long const > tmpview1 ;
  Teuchos::Array< long long > *result = 0 ;
  
  tmpview1 = Teuchos::ArrayView<long long const>(static_cast<long long const*>(farg1->data), farg1->size);
  arg1 = &tmpview1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Array< long long >::Array(Teuchos::ArrayView< long long const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long > *)new Teuchos::Array< long long >((Teuchos::ArrayView< long long const > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< long long >::Array(Teuchos::ArrayView< long long const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< long long >::Array(Teuchos::ArrayView< long long const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Array< long long >::Array(Teuchos::ArrayView< long long const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TeuchosArrayLongLong_view(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  Teuchos::ArrayView< long long > result;
  
  SWIG_check_mutable_nonnull(*farg1, "Teuchos::Array< long long > *", "TeuchosArrayLongLong", "Teuchos::Array< long long >::view()", return SwigArrayWrapper_uninitialized());
  arg1 = static_cast< Teuchos::Array< long long > * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Array< long long >::view()");;
    try
    {
      // Attempt the wrapped function call
      result = Teuchos_Array_Sl_long_SS_long_Sg__view(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< long long >::view()", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< long long >::view()", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Array< long long >::view()", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (void*)(&result)->getRawPtr();
  fresult.size = (&result)->size();
  return fresult;
}


SWIGEXPORT void _wrap_delete_TeuchosArrayLongLong(SwigClassWrapper *farg1) {
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  
  SWIG_check_mutable(*farg1, "Teuchos::Array< long long > *", "TeuchosArrayLongLong", "Teuchos::Array< long long >::~Array()", return );
  arg1 = static_cast< Teuchos::Array< long long > * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Array< long long >::~Array()");;
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< long long >::~Array()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Array< long long >::~Array()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Array< long long >::~Array()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TeuchosArrayLongLong_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  Teuchos::Array< long long > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<Teuchos::Array< long long >, SWIGPOLICY_Teuchos__ArrayT_long_long_t>(farg1, *farg2);
  
}


SWIGEXPORT int _wrap_TeuchosComm_getRank(SwigClassWrapper const *farg1) {
  int fresult ;
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *smartarg1 ;
  int result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::Comm<int> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::Comm<int>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Comm< int >::getRank() const");;
    try
    {
      // Attempt the wrapped function call
      result = (int)((Teuchos::Comm< int > const *)arg1)->getRank();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::getRank() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::getRank() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Comm< int >::getRank() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TeuchosComm_getSize(SwigClassWrapper const *farg1) {
  int fresult ;
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *smartarg1 ;
  int result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::Comm<int> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::Comm<int>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Comm< int >::getSize() const");;
    try
    {
      // Attempt the wrapped function call
      result = (int)((Teuchos::Comm< int > const *)arg1)->getSize();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::getSize() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::getSize() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Comm< int >::getSize() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT void _wrap_TeuchosComm_barrier(SwigClassWrapper const *farg1) {
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::Comm<int> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::Comm<int>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Comm< int >::barrier() const");;
    try
    {
      // Attempt the wrapped function call
      ((Teuchos::Comm< int > const *)arg1)->barrier();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::barrier() const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::barrier() const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Comm< int >::barrier() const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigClassWrapper _wrap_new_TeuchosComm__SWIG_0(int const *farg1) {
  SwigClassWrapper fresult ;
  MPI_Comm arg1 ;
  Teuchos::Comm< int > *result = 0 ;
  
#if FORTRILINOS_USE_MPI
  arg1 = MPI_Comm_f2c(static_cast< MPI_Fint >(*farg1));
#else
  arg1 = *farg1;
#endif
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Comm< int >::Comm(MPI_Comm)");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Comm< int > *)new_Teuchos_Comm_Sl_int_Sg___SWIG_0(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::Comm(MPI_Comm)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::Comm(MPI_Comm)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Comm< int >::Comm(MPI_Comm)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Teuchos::Comm<int> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TeuchosComm__SWIG_1() {
  SwigClassWrapper fresult ;
  Teuchos::Comm< int > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Comm< int >::Comm()");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Comm< int > *)new_Teuchos_Comm_Sl_int_Sg___SWIG_1();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::Comm()", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::Comm()", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Comm< int >::Comm()", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Teuchos::Comm<int> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT int _wrap_TeuchosComm_getRawMpiComm(SwigClassWrapper const *farg1) {
  int fresult ;
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > > *smartarg1 ;
  MPI_Comm result;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::Comm<int> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::Comm<int>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Comm< int >::getRawMpiComm()");;
    try
    {
      // Attempt the wrapped function call
      result = Teuchos_Comm_Sl_int_Sg__getRawMpiComm(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::getRawMpiComm()", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::getRawMpiComm()", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Comm< int >::getRawMpiComm()", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
#if FORTRILINOS_USE_MPI
  fresult = static_cast< int >(MPI_Comm_c2f(result));
#else
  fresult = result;
#endif
  return fresult;
}


SWIGEXPORT void _wrap_delete_TeuchosComm(SwigClassWrapper *farg1) {
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::Comm<int> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::Comm<int>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::Comm< int >::~Comm()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::~Comm()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::Comm< int >::~Comm()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::Comm< int >::~Comm()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TeuchosComm_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::Comm< int > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > > *smartarg1 ;
  Teuchos::RCP< Teuchos::Comm< int > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::Comm<int> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::Comm<int>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Teuchos::Comm< int > *", "TeuchosComm", "Teuchos::Comm< int >::operator =(Teuchos::Comm< int > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Teuchos::Comm<int> >* >(farg2->cptr);
  arg2 = const_cast< Teuchos::Comm<int>* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Teuchos::Comm<int> >, SWIGPOLICY_Teuchos__CommT_int_t>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_ParameterList__SWIG_0() {
  SwigClassWrapper fresult ;
  Teuchos::ParameterList *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::ParameterList()");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ParameterList *)new Teuchos::ParameterList();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::ParameterList()", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::ParameterList()", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::ParameterList()", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Teuchos::ParameterList >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_ParameterList__SWIG_1(SwigArrayWrapper *farg1) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  std::string tempstr1 ;
  Teuchos::ParameterList *result = 0 ;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::ParameterList(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ParameterList *)new Teuchos::ParameterList((std::string const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::ParameterList(std::string const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::ParameterList(std::string const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::ParameterList(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Teuchos::ParameterList >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_ParameterList_print(SwigClassWrapper const *farg1) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList const > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::print() const");;
    try
    {
      // Attempt the wrapped function call
      ((Teuchos::ParameterList const *)arg1)->print();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::print() const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::print() const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::print() const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ParameterList_remove(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::remove(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->remove((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::remove(std::string const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::remove(std::string const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::remove(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_ParameterList_is_parameter(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  int fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList const > *smartarg1 ;
  std::string tempstr2 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::isParameter(std::string const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::ParameterList const *)arg1)->isParameter((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::isParameter(std::string const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::isParameter(std::string const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::isParameter(std::string const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_ParameterList_sublist(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  SwigClassWrapper fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::ParameterList *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::sublist(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ParameterList *) &(arg1)->sublist((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::sublist(std::string const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::sublist(std::string const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::sublist(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  {
    fresult.cptr = new Teuchos::RCP< Teuchos::ParameterList >(result SWIG_NO_NULL_DELETER_0);
    fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  }
  return fresult;
}


SWIGEXPORT void _wrap_ParameterList_set__SWIG_1(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, double const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  double *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  double temp3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  temp3 = static_cast< double >(*farg3);
  arg3 = &temp3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::set< double >(std::string const &,double const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< double >((std::string const &)*arg2,(double const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< double >(std::string const &,double const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< double >(std::string const &,double const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::set< double >(std::string const &,double const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ParameterList_set__SWIG_2(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, int const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  int temp3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  temp3 = static_cast< int >(*farg3);
  arg3 = &temp3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::set< int >(std::string const &,int const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< int >((std::string const &)*arg2,(int const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< int >(std::string const &,int const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< int >(std::string const &,int const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::set< int >(std::string const &,int const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ParameterList_set__SWIG_3(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, long long const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  long long *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  long long temp3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  temp3 = static_cast< long long >(*farg3);
  arg3 = &temp3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::set< long long >(std::string const &,long long const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< long long >((std::string const &)*arg2,(long long const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< long long >(std::string const &,long long const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< long long >(std::string const &,long long const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::set< long long >(std::string const &,long long const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ParameterList_set__SWIG_4(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, int const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  bool tempbool3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  tempbool3 = (*farg3 ? true : false);
  arg3 = &tempbool3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::set< bool >(std::string const &,bool const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< bool >((std::string const &)*arg2,(bool const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< bool >(std::string const &,bool const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< bool >(std::string const &,bool const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::set< bool >(std::string const &,bool const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ParameterList_set__SWIG_5(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, SwigArrayWrapper *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  std::string tempstr3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  tempstr3 = std::string(static_cast<const char *>(farg3->data), farg3->size);
  arg3 = &tempstr3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::set< std::string >(std::string const &,std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< std::string >((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< std::string >(std::string const &,std::string const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< std::string >(std::string const &,std::string const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::set< std::string >(std::string const &,std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ParameterList_set__SWIG_6(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, SwigArrayWrapper *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::Array< double > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< double > temparr3 ;
  Teuchos::Array< double >::value_type *tempbegin3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  tempbegin3 = static_cast<Teuchos::Array<double>::value_type*>(farg3->data);
  temparr3.assign(tempbegin3, tempbegin3 + farg3->size);
  arg3 = &temparr3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< double > >(std::string const &,Teuchos::Array< double > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< Teuchos::Array< double > >((std::string const &)*arg2,(Teuchos::Array< double > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< double > >(std::string const &,Teuchos::Array< double > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< double > >(std::string const &,Teuchos::Array< double > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< double > >(std::string const &,Teuchos::Array< double > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ParameterList_set__SWIG_7(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, SwigArrayWrapper *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::Array< int > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< int > temparr3 ;
  Teuchos::Array< int >::value_type *tempbegin3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  tempbegin3 = static_cast<Teuchos::Array<int>::value_type*>(farg3->data);
  temparr3.assign(tempbegin3, tempbegin3 + farg3->size);
  arg3 = &temparr3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< int > >(std::string const &,Teuchos::Array< int > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< Teuchos::Array< int > >((std::string const &)*arg2,(Teuchos::Array< int > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< int > >(std::string const &,Teuchos::Array< int > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< int > >(std::string const &,Teuchos::Array< int > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< int > >(std::string const &,Teuchos::Array< int > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ParameterList_set__SWIG_8(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, SwigArrayWrapper *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::Array< long long > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< long long > temparr3 ;
  Teuchos::Array< long long >::value_type *tempbegin3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  tempbegin3 = static_cast<Teuchos::Array<long long>::value_type*>(farg3->data);
  temparr3.assign(tempbegin3, tempbegin3 + farg3->size);
  arg3 = &temparr3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< long long > >(std::string const &,Teuchos::Array< long long > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< Teuchos::Array< long long > >((std::string const &)*arg2,(Teuchos::Array< long long > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< long long > >(std::string const &,Teuchos::Array< long long > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< long long > >(std::string const &,Teuchos::Array< long long > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::Array< long long > >(std::string const &,Teuchos::Array< long long > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ParameterList_set__SWIG_9(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, SwigClassWrapper const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::ParameterList *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::RCP< Teuchos::ParameterList const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  SWIG_check_sp_nonnull(farg3, "Teuchos::ParameterList *", "ParameterList", "Teuchos::ParameterList::set< Teuchos::ParameterList >(std::string const &,Teuchos::ParameterList const &)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Teuchos::ParameterList >* >(farg3->cptr);
  arg3 = const_cast< Teuchos::ParameterList* >(smartarg3->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::set< Teuchos::ParameterList >(std::string const &,Teuchos::ParameterList const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< Teuchos::ParameterList >((std::string const &)*arg2,(Teuchos::ParameterList const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::ParameterList >(std::string const &,Teuchos::ParameterList const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::ParameterList >(std::string const &,Teuchos::ParameterList const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::set< Teuchos::ParameterList >(std::string const &,Teuchos::ParameterList const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT double _wrap_ParameterList_get_real(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  double fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  double *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::get< double >(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (double *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< double >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< double >(std::string const &)", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< double >(std::string const &)", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::get< double >(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT int _wrap_ParameterList_get_integer(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  int fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  int *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::get< int >(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (int *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< int >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< int >(std::string const &)", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< int >(std::string const &)", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::get< int >(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT long long _wrap_ParameterList_get_longlong(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  long long fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  long long *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::get< long long >(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (long long *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< long long >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< long long >(std::string const &)", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< long long >(std::string const &)", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::get< long long >(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT int _wrap_ParameterList_get_logical(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  int fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  bool *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::get< bool >(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (bool *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< bool >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< bool >(std::string const &)", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< bool >(std::string const &)", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::get< bool >(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_ParameterList_get_string(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  SwigArrayWrapper fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  std::string *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::get< std::string >(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (std::string *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< std::string >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< std::string >(std::string const &)", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< std::string >(std::string const &)", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::get< std::string >(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_ParameterList_get_arr_real(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  SwigArrayWrapper fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< double > *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< double > >(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< Teuchos::Array< double > >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< double > >(std::string const &)", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< double > >(std::string const &)", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< double > >(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_ParameterList_get_arr_integer(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  SwigArrayWrapper fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< int > *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< int > >(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< Teuchos::Array< int > >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< int > >(std::string const &)", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< int > >(std::string const &)", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< int > >(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_ParameterList_get_arr_longlong(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  SwigArrayWrapper fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< long long > *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< long long > >(std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< Teuchos::Array< long long > >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< long long > >(std::string const &)", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< long long > >(std::string const &)", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::get< Teuchos::Array< long long > >(std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  return fresult;
}


SWIGEXPORT void _wrap_delete_ParameterList(SwigClassWrapper *farg1) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Teuchos::ParameterList::~ParameterList()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::~ParameterList()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Teuchos::ParameterList::~ParameterList()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Teuchos::ParameterList::~ParameterList()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ParameterList_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  Teuchos::ParameterList *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Teuchos::ParameterList* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Teuchos::ParameterList *", "ParameterList", "Teuchos::ParameterList::operator =(Teuchos::ParameterList &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg2->cptr);
  arg2 = const_cast< Teuchos::ParameterList* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Teuchos::ParameterList >, SWIGPOLICY_Teuchos__ParameterList>(farg1, *farg2);
  
}


SWIGEXPORT void _wrap_load_from_xml(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Teuchos::RCP< Teuchos::ParameterList > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull1 ;
  std::string tempstr2 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg1->cptr) : &tempnull1;
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("load_from_xml(Teuchos::RCP< Teuchos::ParameterList > const &,std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      load_from_xml((Teuchos::RCP< Teuchos::ParameterList > const &)*arg1,(std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("load_from_xml(Teuchos::RCP< Teuchos::ParameterList > const &,std::string const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("load_from_xml(Teuchos::RCP< Teuchos::ParameterList > const &,std::string const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("load_from_xml(Teuchos::RCP< Teuchos::ParameterList > const &,std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_save_to_xml(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Teuchos::ParameterList *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList const > *smartarg1 ;
  std::string tempstr2 ;
  
  SWIG_check_sp_nonnull(farg1, "Teuchos::ParameterList *", "ParameterList", "save_to_xml(Teuchos::ParameterList const &,std::string const &)", return )
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = const_cast< Teuchos::ParameterList* >(smartarg1->get());
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("save_to_xml(Teuchos::ParameterList const &,std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      save_to_xml((Teuchos::ParameterList const &)*arg1,(std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("save_to_xml(Teuchos::ParameterList const &,std::string const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("save_to_xml(Teuchos::ParameterList const &,std::string const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("save_to_xml(Teuchos::ParameterList const &,std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


} // extern

