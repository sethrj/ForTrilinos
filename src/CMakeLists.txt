#---------------------------------*-CMake-*----------------------------------#
# Copyright 2020 UT-Battelle, LLC
# License-Filename: LICENSE
# SPDX-License-Identifier: BSD-3-Clause
#----------------------------------------------------------------------------#

#----------------------------------------------------------------------------#
# Configure file
#----------------------------------------------------------------------------#


set(FORTRILINOS_USE_MPI                 ${ForTrilinos_USE_MPI})
set(FORTRILINOS_USE_BELOS               ${Trilinos_Belos_FOUND})
set(FORTRILINOS_USE_TPETRA              ${Trilinos_Tpetra_FOUND})
set(FORTRILINOS_USE_ANASAZI             ${Trilinos_Anasazi_FOUND})
set(FORTRILINOS_USE_NOX                 ${Trilinos_NOX_FOUND})
set(FORTRILINOS_USE_STRATIMIKOS         ${Trilinos_Stratimikos_FOUND})
set(FORTRILINOS_USE_THYRA               ${Trilinos_Thyra_FOUND})
set(FORTRILINOS_USE_THYRATPETRAADAPTERS ${Trilinos_ThyraTpetraAdapters_FOUND})
set(FORTRILINOS_USE_IFPACK2             ${Trilinos_Ifpack2_FOUND})
set(FORTRILINOS_USE_MUELU               ${Trilinos_MueLu_FOUND})

configure_file("ForTrilinos_config.h.in"
  "${ForTrilinos_HEADER_CONFIG_DIRECTORY}/ForTrilinos_config.h" @ONLY)

#----------------------------------------------------------------------------#
# Modules and fortrilinos library
#----------------------------------------------------------------------------#

set(_DEPS)

# Add a module file in $module/$module.i
function(_add_module module)
  get_filename_component(module_source "${module}/${module}.i" ABSOLUTE)
  get_filename_component(_GENERATE_DIR "${module_source}" DIRECTORY)
  set(_GENERATE_DIR "${_GENERATE_DIR}/generated")

  if(ForTrilinos_USE_SWIG_Fortran)
    # SWIG is available; actually generate the library dynamically.

    # Ignore some SWIG warnings:
    #   401: "Nothing known about base class"
    set(_SWIG_FLAGS "-w401" "-fext" "F90")
    set_source_files_properties("${module_source}" PROPERTIES
      CPLUSPLUS ON
      USE_TARGET_INCLUDE_DIRECTORIES ON
      SWIG_FLAGS "${_SWIG_FLAGS}"
    )

    # Create the library
    swig_add_library(${module}
      LANGUAGE Fortran
      TYPE STATIC
      OUTPUT_DIR "${_GENERATE_DIR}"
      SOURCES "${module_source}"
        ${ARGN}
    )

    # Add SWIG headers
    target_include_directories(${module}
      PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
    )

    # Install the interface file for downstream libraries to use
    install(FILES
      "${module_source}"
      DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
    )
  else()
    get_filename_component(_module_name "${module_source}" NAME_WE)
    # SWIG is *not* being used: compile the code committed in the repository,
    # generated by the developer with SWIG.
    add_library(${module} STATIC
      "${_GENERATE_DIR}/${_module_name}.F90"
      "${_GENERATE_DIR}/${_module_name}FORTRAN_wrap.cxx"
      ${ARGN}
    )
  endif()

  # Set where to build the fortran module files
  set_target_properties(${module}
    PROPERTIES Fortran_MODULE_DIRECTORY "${ForTrilinos_Fortran_MODULE_DIRECTORY}"
  )

  # Build flags
  target_compile_features(${module} PUBLIC cxx_std_11)

  # Include directories for fortrilinos
  target_include_directories(${module}
    PUBLIC
      # Fortran modules
      $<BUILD_INTERFACE:${ForTrilinos_Fortran_MODULE_DIRECTORY}>
      $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
      # Headers and swig modules
      $<BUILD_INTERFACE:${ForTrilinos_HEADER_CONFIG_DIRECTORY}>
      $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>
  )

  # Use trilinos includes
  target_link_libraries(${module} PUBLIC Trilinos::Trilinos)

  set(_DEPS "${_DEPS};${module}" PARENT_SCOPE)
endfunction()

_add_module(forerror)
_add_module(forteuchos)
target_link_libraries(forteuchos
  PRIVATE Trilinos::TeuchosComm
   Trilinos::TeuchosParameterList)
if(ForTrilinos_USE_MPI)
  target_link_libraries(forteuchos PUBLIC forerror MPI::MPI_CXX)
endif()

if(Trilinos_Tpetra_FOUND)
  _add_module(fortpetra)
  target_link_libraries(fortpetra PRIVATE forerror forteuchos Trilinos::Tpetra)
endif()

if(Trilinos_Belos_FOUND)
  _add_module(forbelos)
  target_link_libraries(forbelos PRIVATE forerror forteuchos Trilinos::Belos)
endif()

if(ForTrilinos_USE_HL)
  _add_module(fortrilinos_hl
    fortrilinos_hl/solver_handle.cpp
    fortrilinos_hl/eigen_handle.cpp
    fortrilinos_hl/fortrilinos_utilities.cpp
  )
  target_link_libraries(fortrilinos_hl PRIVATE
    forerror
    fortpetra
    forteuchos
    Trilinos::NOX
    Trilinos::Anasazi
    Trilinos::Stratimikos
    Trilinos::Thyra
    Trilinos::ThyraTpetraAdapters
  )
  foreach(_optional Ifpack2 MueLu)
    if(Trilinos_${_optional}_FOUND)
      target_link_libraries(fortrilinos_hl PRIVATE Trilinos::${_optional})
    endif()
  endforeach()
endif()

add_library(ForTrilinos INTERFACE)
target_link_libraries(ForTrilinos INTERFACE ${_DEPS})

add_library(${ForTrilinos_NAMESPACE}ForTrilinos ALIAS ForTrilinos)

# Install library
install(TARGETS ForTrilinos
  EXPORT fortrilinos-targets
  ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
  LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
  COMPONENT ${target}
)

#----------------------------------------------------------------------------#
# Headers
#----------------------------------------------------------------------------#

install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/ForTrilinos.h"
  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
)

#---------------------------------------------------------------------------##
