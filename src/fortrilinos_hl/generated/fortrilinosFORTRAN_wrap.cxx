/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Copyright 2017-2018, UT-Battelle, LLC
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * License-Filename: LICENSE
 */


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* qualifier for exported *const* global data variables*/
#ifndef SWIGEXTERN
# ifdef __cplusplus
#   define SWIGEXTERN extern
# else
#   define SWIGEXTERN
# endif
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
 { throw std::logic_error("In " DECL ": " MSG); }


extern "C" {
void SWIG_check_unhandled_exception_impl(const char* decl);
void SWIG_store_exception(const char* decl, int errcode, const char *msg);
}


#undef SWIG_exception_impl
#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
    SWIG_store_exception(DECL, CODE, MSG); RETURNNULL;


enum SwigMemFlags {
    SWIG_MEM_OWN = 0x01,
    SWIG_MEM_RVALUE = 0x02,
    SWIG_MEM_CONST = 0x04
};


#define SWIG_check_mutable(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    if ((SWIG_CLASS_WRAPPER).cmemflags & SWIG_MEM_CONST) { \
        SWIG_exception_impl(FUNCNAME, SWIG_TypeError, \
            "Cannot pass const " TYPENAME " (class " FNAME ") " \
            "as a mutable reference", \
            RETURNNULL); \
    }


#define SWIG_check_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(SWIG_CLASS_WRAPPER).cptr) { \
    SWIG_exception_impl(FUNCNAME, SWIG_TypeError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }


#define SWIG_check_mutable_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    SWIG_check_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL); \
    SWIG_check_mutable(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL);


namespace swig {
enum AssignmentType {
  ASSIGNMENT_DEFAULT,
  ASSIGNMENT_NODESTRUCT,
  ASSIGNMENT_SMARTPTR
};
}


#define SWIG_check_sp_nonnull(INPUT, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(INPUT)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_TypeError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }

#define SWIG_constsp_mem_flags SWIG_MEM_CONST
#define SWIG_sp_mem_flags 0


#define SWIGPOLICY_ForTrilinos__TrilinosSolver swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_ForTrilinos__TrilinosEigenSolver swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_ForTrilinos__ModelEvaluatorT_double_int_long_long_ForTrilinos__DefaultNodeType_t swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_ForModelEvaluator swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_ForTrilinos__NOXSolverT_double_int_long_long_ForTrilinos__DefaultNodeType_t swig::ASSIGNMENT_SMARTPTR

#include <stdexcept>


/* Support for the `contract` feature.
 *
 * Note that RETURNNULL is first because it's inserted via a 'Replaceall' in
 * the fortran.cxx file.
 */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
 if (!(EXPR)) { SWIG_exception_impl("$decl", SWIG_ValueError, MSG, RETURNNULL); } 


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include "Kokkos_DefaultNode.hpp"
#include "ForTrilinos_DefaultNodeType.hpp"


typedef double                                  SC;
typedef int                                     LO;
typedef long long                               GO;
typedef ForTrilinos::DefaultNodeType            NO;
typedef char                                    Packet;


#include "solver_handle.hpp"
#include "eigen_handle.hpp"


struct SwigClassWrapper {
    void* cptr;
    int cmemflags;
};


SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized() {
    SwigClassWrapper result;
    result.cptr = NULL;
    result.cmemflags = 0;
    return result;
}


namespace swig {

template<class T, AssignmentType A>
struct DestructorPolicy {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    delete static_cast<T*>(self.cptr);
    return SwigClassWrapper_uninitialized();
  }
};
template<class T>
struct DestructorPolicy<T, ASSIGNMENT_NODESTRUCT> {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    SWIG_exception_impl("assignment", SWIG_TypeError, "Invalid assignment: class type has private destructor", return SwigClassWrapper_uninitialized());
  }
};
}


namespace swig {

template<class T, AssignmentType A>
struct AssignmentPolicy {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    return DestructorPolicy<T, A>::destruct(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = other.cptr;
    self.cmemflags = other.cmemflags & ~SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destruct(self);
    }
    self.cptr = other.cptr;
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destruct(self);
    }
    self.cptr = other.cptr;
    self.cmemflags = other.cmemflags & ~SWIG_MEM_OWN;
    return self;
  }
};

template<class T>
struct AssignmentPolicy<T, ASSIGNMENT_SMARTPTR> {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    return DestructorPolicy<T, ASSIGNMENT_SMARTPTR>::destruct(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = new T(*static_cast<T*>(other.cptr));
    self.cmemflags = other.cmemflags | SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    self = copy_alias(self, other);
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    destruct(other);
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    // LHS and RHS should both 'own' their shared pointers
    T *pself = static_cast<T*>(self.cptr);
    T *pother = static_cast<T*>(other.cptr);
    *pself = *pother;
    return self;
  }
};

} // end namespace swig

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_assign(SwigClassWrapper* self, SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;

  if (self->cptr == NULL) {
    /* LHS is unassigned */
    if (other.cmemflags & SWIG_MEM_RVALUE) {
      /* Capture pointer from RHS, clear 'moving' flag */
      self->cptr = other.cptr;
      self->cmemflags = other.cmemflags & (~SWIG_MEM_RVALUE);
    } else {
      /* Aliasing another class; clear ownership or copy smart pointer */
      *self = Policy_t::alias(other);
    }
  } else if (other.cptr == NULL) {
    /* Replace LHS with a null pointer */
    *self = Policy_t::destruct(*self);
  } else if (other.cmemflags & SWIG_MEM_RVALUE) {
    /* Transferred ownership from a variable that's about to be lost.
     * Move-assign and delete the transient data */
    *self = Policy_t::move_alias(*self, other);
  } else {
    /* RHS shouldn't be deleted, alias to LHS */
    *self = Policy_t::copy_alias(*self, other);
  }
}


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


struct SwigArrayWrapper {
    void* data;
    size_t size;
};


SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized() {
  SwigArrayWrapper result;
  result.data = NULL;
  result.size = 0;
  return result;
}


#include "model_evaluator.hpp"


extern "C" {
/* Fortran BIND(C) function */
void swigd_ForModelEvaluator_evaluate_residual(
        SwigClassWrapper const *fself,
        SwigClassWrapper const *farg1,
        SwigClassWrapper const *farg2
        );
void swigd_ForModelEvaluator_evaluate_jacobian(
        SwigClassWrapper const *fself,
        SwigClassWrapper const *farg1,
        SwigClassWrapper const *farg2
        );
void swigd_ForModelEvaluator_evaluate_preconditioner(
        SwigClassWrapper const *fself,
        SwigClassWrapper const *farg1,
        SwigClassWrapper const *farg2
        );
SwigClassWrapper swigd_ForModelEvaluator_get_x_map(
        SwigClassWrapper const *fself
        );
SwigClassWrapper swigd_ForModelEvaluator_get_f_map(
        SwigClassWrapper const *fself
        );
SwigClassWrapper swigd_ForModelEvaluator_create_operator(
        SwigClassWrapper const *fself
        );
}


  // FIXME for some reason SWIG_NO_NULL_DELETER is included *after* this class definition
#define SWIG_NO_NULL_DELETER_0 ,Teuchos::RCP_WEAK_NO_DEALLOC
  class ForModelEvaluator : public ForTrilinos::ModelEvaluator<SC,LO,GO,NO> {
    // Pointer to polymorphic fortran pointer
    void* fhandle_;
   public:
    /* DIRECTOR FUNCTIONS */
    const void* fhandle() const { assert(fhandle_); return this->fhandle_; }
    void init(void* fh) { fhandle_ = fh; }

    /* ModelEvaluator */
    typedef Tpetra::Map<LO,GO,NO> map_type;
    typedef Tpetra::MultiVector<SC,LO,GO,NO> multivector_type;
    typedef Tpetra::Operator<SC,LO,GO,NO> operator_type;

    void setup(Teuchos::RCP<Teuchos::ParameterList>& plist) {
      ForTrilinos::ModelEvaluator<SC,LO,GO,NO>::setup(plist);
    }

    virtual void evaluate_residual(const Teuchos::RCP<const multivector_type>& x,
                                   Teuchos::RCP<multivector_type>& f) const override {
      /* construct "this" pointer */
      Teuchos::RCP<ForModelEvaluator> tempthis(
             const_cast<ForModelEvaluator*>(this) SWIG_NO_NULL_DELETER_0);
      SwigClassWrapper self;
      self.cptr = &tempthis;
      self.cmemflags = SWIG_MEM_CONST; // since this function is const

      /* convert x -> class wrapper */
      SwigClassWrapper farg1;
      farg1.cptr = const_cast<Teuchos::RCP<const multivector_type>*>(&x);
      farg1.cmemflags = SWIG_MEM_CONST; // x is const

      /* convert f -> class wrapper */
      SwigClassWrapper farg2;
      farg2.cptr = &f;
      farg2.cmemflags = 0; // f is mutable

      swigd_ForModelEvaluator_evaluate_residual(&self, &farg1, &farg2);
    }

    virtual void evaluate_jacobian(const Teuchos::RCP<const multivector_type>& x,
                                   Teuchos::RCP<operator_type>& J) const override {
      /* construct "this" pointer */
      Teuchos::RCP<ForModelEvaluator> tempthis(
             const_cast<ForModelEvaluator*>(this) SWIG_NO_NULL_DELETER_0);
      SwigClassWrapper self;
      self.cptr = &tempthis;
      self.cmemflags = SWIG_MEM_CONST; // since this function is const

      /* convert x -> class wrapper */
      SwigClassWrapper farg1;
      farg1.cptr = const_cast<Teuchos::RCP<const multivector_type>*>(&x);
      farg1.cmemflags = SWIG_MEM_CONST; // x is const

      /* convert J -> class wrapper */
      SwigClassWrapper farg2;
      farg2.cptr = &J;
      farg2.cmemflags = 0; // f is mutable

      swigd_ForModelEvaluator_evaluate_jacobian(&self, &farg1, &farg2);
    }

    virtual void evaluate_preconditioner(const Teuchos::RCP<const multivector_type>& x,
                                         Teuchos::RCP<operator_type>& M) const override {
      /* construct "this" pointer */
      Teuchos::RCP<ForModelEvaluator> tempthis(
             const_cast<ForModelEvaluator*>(this) SWIG_NO_NULL_DELETER_0);
      SwigClassWrapper self;
      self.cptr = &tempthis;
      self.cmemflags = SWIG_MEM_CONST; // since this function is const

      /* convert x -> class wrapper */
      SwigClassWrapper farg1;
      farg1.cptr = const_cast<Teuchos::RCP<const multivector_type>*>(&x);
      farg1.cmemflags = SWIG_MEM_CONST; // x is const

      /* convert M -> class wrapper */
      SwigClassWrapper farg2;
      farg2.cptr = &M;
      farg2.cmemflags = 0; // f is mutable

      swigd_ForModelEvaluator_evaluate_preconditioner(&self, &farg1, &farg2);
    }

    virtual Teuchos::RCP<const map_type> get_x_map() const override {
      /* construct "this" pointer */
      Teuchos::RCP<ForModelEvaluator> tempthis(
             const_cast<ForModelEvaluator*>(this) SWIG_NO_NULL_DELETER_0);
      SwigClassWrapper self;
      self.cptr = &tempthis;
      self.cmemflags = SWIG_MEM_CONST; // since this function is const

      SwigClassWrapper fresult = swigd_ForModelEvaluator_get_x_map(&self);

      Teuchos::RCP<const map_type>* smartresult = static_cast< Teuchos::RCP<const map_type>* >(fresult.cptr);
      return *smartresult;
    }

    virtual Teuchos::RCP<const map_type> get_f_map() const override {
      /* construct "this" pointer */
      Teuchos::RCP<ForModelEvaluator> tempthis(
             const_cast<ForModelEvaluator*>(this) SWIG_NO_NULL_DELETER_0);
      SwigClassWrapper self;
      self.cptr = &tempthis;
      self.cmemflags = SWIG_MEM_CONST; // since this function is const

      SwigClassWrapper fresult = swigd_ForModelEvaluator_get_f_map(&self);

      Teuchos::RCP<const map_type>* smartresult = static_cast< Teuchos::RCP<const map_type>* >(fresult.cptr);
      return *smartresult;
    }

    virtual Teuchos::RCP<operator_type> create_operator() const override {
      /* construct "this" pointer */
      Teuchos::RCP<ForModelEvaluator> tempthis(
             const_cast<ForModelEvaluator*>(this) SWIG_NO_NULL_DELETER_0);
      SwigClassWrapper self;
      self.cptr = &tempthis;
      self.cmemflags = SWIG_MEM_CONST; // since this function is const

      SwigClassWrapper fresult = swigd_ForModelEvaluator_create_operator(&self);

      Teuchos::RCP<operator_type>* smartresult = static_cast< Teuchos::RCP<operator_type>* >(fresult.cptr);
      return *smartresult;
    }
  };
#undef SWIG_NO_NULL_DELETER_0


#define SWIG_NO_NULL_DELETER_0 , Teuchos::RCP_WEAK_NO_DEALLOC
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#include "NOX_StatusTest_Generic.H"


#include "nox_solver.hpp"

extern "C" {
SWIGEXPORT SwigClassWrapper _wrap_new_TrilinosSolver() {
  SwigClassWrapper fresult ;
  ForTrilinos::TrilinosSolver *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosSolver::TrilinosSolver()");;
    try
    {
      // Attempt the wrapped function call
      result = (ForTrilinos::TrilinosSolver *)new ForTrilinos::TrilinosSolver();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::TrilinosSolver()", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::TrilinosSolver()", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::TrilinosSolver()", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TrilinosSolver_init__SWIG_0(SwigClassWrapper const *farg1) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosSolver *", "TrilinosSolver", "ForTrilinos::TrilinosSolver::init()", return );
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosSolver::init()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->init();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::init()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::init()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::init()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosSolver_init__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosSolver *", "TrilinosSolver", "ForTrilinos::TrilinosSolver::init(Teuchos::RCP< Teuchos::Comm< int > const > const &)", return );
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::Comm< int > const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosSolver::init(Teuchos::RCP< Teuchos::Comm< int > const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->init((Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::init(Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::init(Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::init(Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosSolver_setup_matrix(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > tempnull2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosSolver *", "TrilinosSolver", "ForTrilinos::TrilinosSolver::setup_matrix(Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > const &)", return );
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosSolver::setup_matrix(Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_matrix((Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::setup_matrix(Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::setup_matrix(Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::setup_matrix(Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosSolver_setup_operator(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Operator > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Operator > tempnull2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosSolver *", "TrilinosSolver", "ForTrilinos::TrilinosSolver::setup_operator(Teuchos::RCP< ForTrilinos::TrilinosSolver::Operator > const &)", return );
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForTrilinos::TrilinosSolver::Operator > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosSolver::setup_operator(Teuchos::RCP< ForTrilinos::TrilinosSolver::Operator > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_operator((Teuchos::RCP< ForTrilinos::TrilinosSolver::Operator > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::setup_operator(Teuchos::RCP< ForTrilinos::TrilinosSolver::Operator > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::setup_operator(Teuchos::RCP< ForTrilinos::TrilinosSolver::Operator > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::setup_operator(Teuchos::RCP< ForTrilinos::TrilinosSolver::Operator > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosSolver_setup_solver(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosSolver *", "TrilinosSolver", "ForTrilinos::TrilinosSolver::setup_solver(Teuchos::RCP< Teuchos::ParameterList > const &)", return );
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosSolver::setup_solver(Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_solver((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::setup_solver(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::setup_solver(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::setup_solver(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosSolver_solve(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > tempnull2 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > tempnull3 ;
  
  SWIG_check_nonnull(*farg1, "ForTrilinos::TrilinosSolver const *", "TrilinosSolver", "ForTrilinos::TrilinosSolver::solve(Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > const &,Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > &) const", return );
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosSolver::solve(Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > const &,Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > &) const");;
    try
    {
      // Attempt the wrapped function call
      ((ForTrilinos::TrilinosSolver const *)arg1)->solve((Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::solve(Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > const &,Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::solve(Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > const &,Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::solve(Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > const &,Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosSolver_finalize(SwigClassWrapper const *farg1) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosSolver *", "TrilinosSolver", "ForTrilinos::TrilinosSolver::finalize()", return );
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosSolver::finalize()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->finalize();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::finalize()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::finalize()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::finalize()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_delete_TrilinosSolver(SwigClassWrapper *farg1) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  
  SWIG_check_mutable(*farg1, "ForTrilinos::TrilinosSolver *", "TrilinosSolver", "ForTrilinos::TrilinosSolver::~TrilinosSolver()", return );
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosSolver::~TrilinosSolver()");;
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::~TrilinosSolver()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::~TrilinosSolver()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosSolver::~TrilinosSolver()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosSolver_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  ForTrilinos::TrilinosSolver *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<ForTrilinos::TrilinosSolver, SWIGPOLICY_ForTrilinos__TrilinosSolver>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_TrilinosEigenSolver() {
  SwigClassWrapper fresult ;
  ForTrilinos::TrilinosEigenSolver *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::TrilinosEigenSolver()");;
    try
    {
      // Attempt the wrapped function call
      result = (ForTrilinos::TrilinosEigenSolver *)new ForTrilinos::TrilinosEigenSolver();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::TrilinosEigenSolver()", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::TrilinosEigenSolver()", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::TrilinosEigenSolver()", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TrilinosEigenSolver_init__SWIG_0(SwigClassWrapper const *farg1) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosEigenSolver *", "TrilinosEigenSolver", "ForTrilinos::TrilinosEigenSolver::init()", return );
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::init()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->init();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::init()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::init()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::init()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosEigenSolver_init__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosEigenSolver *", "TrilinosEigenSolver", "ForTrilinos::TrilinosEigenSolver::init(Teuchos::RCP< Teuchos::Comm< int > const > const &)", return );
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::Comm< int > const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::init(Teuchos::RCP< Teuchos::Comm< int > const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->init((Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::init(Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::init(Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::init(Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosEigenSolver_setup_matrix(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > tempnull2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosEigenSolver *", "TrilinosEigenSolver", "ForTrilinos::TrilinosEigenSolver::setup_matrix(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)", return );
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_matrix(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_matrix((Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_matrix(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_matrix(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_matrix(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosEigenSolver_setup_matrix_rhs(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > tempnull2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosEigenSolver *", "TrilinosEigenSolver", "ForTrilinos::TrilinosEigenSolver::setup_matrix_rhs(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)", return );
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_matrix_rhs(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_matrix_rhs((Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_matrix_rhs(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_matrix_rhs(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_matrix_rhs(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosEigenSolver_setup_operator(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > tempnull2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosEigenSolver *", "TrilinosEigenSolver", "ForTrilinos::TrilinosEigenSolver::setup_operator(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)", return );
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_operator(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_operator((Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_operator(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_operator(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_operator(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosEigenSolver_setup_operator_rhs(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > tempnull2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosEigenSolver *", "TrilinosEigenSolver", "ForTrilinos::TrilinosEigenSolver::setup_operator_rhs(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)", return );
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_operator_rhs(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_operator_rhs((Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_operator_rhs(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_operator_rhs(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_operator_rhs(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Operator > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosEigenSolver_setup_solver(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosEigenSolver *", "TrilinosEigenSolver", "ForTrilinos::TrilinosEigenSolver::setup_solver(Teuchos::RCP< Teuchos::ParameterList > const &)", return );
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1->cptr);
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_solver(Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_solver((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_solver(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_solver(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::setup_solver(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_TrilinosEigenSolver_solve(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, SwigClassWrapper const *farg3, SwigArrayWrapper *farg4) {
  int fresult ;
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::ArrayView< ForTrilinos::TrilinosEigenSolver::SC > arg2 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > *arg3 = 0 ;
  Teuchos::ArrayView< int > arg4 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > tempnull3 ;
  int result;
  
  SWIG_check_nonnull(*farg1, "ForTrilinos::TrilinosEigenSolver const *", "TrilinosEigenSolver", "ForTrilinos::TrilinosEigenSolver::solve(Teuchos::ArrayView< ForTrilinos::TrilinosEigenSolver::SC >,Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > &,Teuchos::ArrayView< int >) const", return 0);
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1->cptr);
  arg2 = Teuchos::ArrayView<double>(static_cast<double*>(farg2->data), farg2->size);
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > * >(farg3->cptr) : &tempnull3;
  arg4 = Teuchos::ArrayView<int>(static_cast<int*>(farg4->data), farg4->size);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::solve(Teuchos::ArrayView< ForTrilinos::TrilinosEigenSolver::SC >,Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > &,Teuchos::ArrayView< int >) const");;
    try
    {
      // Attempt the wrapped function call
      result = (int)((ForTrilinos::TrilinosEigenSolver const *)arg1)->solve(arg2,*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::solve(Teuchos::ArrayView< ForTrilinos::TrilinosEigenSolver::SC >,Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > &,Teuchos::ArrayView< int >) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::solve(Teuchos::ArrayView< ForTrilinos::TrilinosEigenSolver::SC >,Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > &,Teuchos::ArrayView< int >) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::solve(Teuchos::ArrayView< ForTrilinos::TrilinosEigenSolver::SC >,Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > &,Teuchos::ArrayView< int >) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT void _wrap_TrilinosEigenSolver_finalize(SwigClassWrapper const *farg1) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  
  SWIG_check_mutable_nonnull(*farg1, "ForTrilinos::TrilinosEigenSolver *", "TrilinosEigenSolver", "ForTrilinos::TrilinosEigenSolver::finalize()", return );
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::finalize()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->finalize();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::finalize()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::finalize()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::finalize()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_delete_TrilinosEigenSolver(SwigClassWrapper *farg1) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  
  SWIG_check_mutable(*farg1, "ForTrilinos::TrilinosEigenSolver *", "TrilinosEigenSolver", "ForTrilinos::TrilinosEigenSolver::~TrilinosEigenSolver()", return );
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::TrilinosEigenSolver::~TrilinosEigenSolver()");;
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::~TrilinosEigenSolver()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::~TrilinosEigenSolver()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::TrilinosEigenSolver::~TrilinosEigenSolver()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TrilinosEigenSolver_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  ForTrilinos::TrilinosEigenSolver *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<ForTrilinos::TrilinosEigenSolver, SWIGPOLICY_ForTrilinos__TrilinosEigenSolver>(farg1, *farg2);
  
}


SWIGEXPORT void _wrap_ForTrilinosModelEvaluator_evaluate_residual(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *arg1 = (ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > tempnull2 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::ModelEvaluator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_residual(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector > &) const");;
    try
    {
      // Attempt the wrapped function call
      ((ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const *)arg1)->evaluate_residual((Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_residual(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector > &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_residual(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector > &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_residual(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector > &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ForTrilinosModelEvaluator_evaluate_jacobian(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *arg1 = (ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > tempnull2 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::ModelEvaluator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_jacobian(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > &) const");;
    try
    {
      // Attempt the wrapped function call
      ((ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const *)arg1)->evaluate_jacobian((Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_jacobian(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_jacobian(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_jacobian(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ForTrilinosModelEvaluator_evaluate_preconditioner(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *arg1 = (ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > tempnull2 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::ModelEvaluator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_preconditioner(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > &) const");;
    try
    {
      // Attempt the wrapped function call
      ((ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const *)arg1)->evaluate_preconditioner((Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_preconditioner(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_preconditioner(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::evaluate_preconditioner(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::MultiVector const > const &,Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigClassWrapper _wrap_ForTrilinosModelEvaluator_get_x_map(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *arg1 = (ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Map const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::ModelEvaluator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::get_x_map() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const *)arg1)->get_x_map();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::get_x_map() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::get_x_map() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::get_x_map() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_ForTrilinosModelEvaluator_get_f_map(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *arg1 = (ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Map const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::ModelEvaluator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::get_f_map() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const *)arg1)->get_f_map();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::get_f_map() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::get_f_map() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::get_f_map() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_ForTrilinosModelEvaluator_create_operator(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *arg1 = (ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType >::Operator > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::ModelEvaluator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::create_operator() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((ForTrilinos::ModelEvaluator< SC,LO,GO,NO > const *)arg1)->create_operator();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::create_operator() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::create_operator() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::create_operator() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_ForTrilinosModelEvaluator_setup(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *arg1 = (ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::ModelEvaluator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::setup(Teuchos::RCP< Teuchos::ParameterList > &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup(*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::setup(Teuchos::RCP< Teuchos::ParameterList > &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::setup(Teuchos::RCP< Teuchos::ParameterList > &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::setup(Teuchos::RCP< Teuchos::ParameterList > &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_delete_ForTrilinosModelEvaluator(SwigClassWrapper *farg1) {
  ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *arg1 = (ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::ModelEvaluator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::~ModelEvaluator()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::~ModelEvaluator()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::~ModelEvaluator()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::~ModelEvaluator()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ForTrilinosModelEvaluator_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *arg1 = (ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *) 0 ;
  ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< SC,LO,GO,NO > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::ModelEvaluator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "ForTrilinos::ModelEvaluator< SC,LO,GO,NO > *", "ForTrilinosModelEvaluator", "ForTrilinos::ModelEvaluator< SC,LO,GO,NO >::operator =(ForTrilinos::ModelEvaluator< SC,LO,GO,NO > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< ForTrilinos::ModelEvaluator<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< ForTrilinos::ModelEvaluator<SC,LO,GO,NO> >, SWIGPOLICY_ForTrilinos__ModelEvaluatorT_double_int_long_long_ForTrilinos__DefaultNodeType_t>(farg1, *farg2);
  
}


SWIGEXPORT void * _wrap_ForModelEvaluator_fhandle(SwigClassWrapper const *farg1) {
  void * fresult ;
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  Teuchos::RCP< ForModelEvaluator const > *smartarg1 ;
  void *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::fhandle() const");;
    try
    {
      // Attempt the wrapped function call
      result = (void *)((ForModelEvaluator const *)arg1)->fhandle();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::fhandle() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::fhandle() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::fhandle() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void _wrap_ForModelEvaluator_init(SwigClassWrapper const *farg1, void *farg2) {
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  void *arg2 = (void *) 0 ;
  Teuchos::RCP< ForModelEvaluator > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  arg2 = reinterpret_cast< void * >(farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::init(void *)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->init(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::init(void *)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::init(void *)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::init(void *)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ForModelEvaluator_setup(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< ForModelEvaluator > *smartarg1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::setup(Teuchos::RCP< Teuchos::ParameterList > &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup(*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::setup(Teuchos::RCP< Teuchos::ParameterList > &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::setup(Teuchos::RCP< Teuchos::ParameterList > &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::setup(Teuchos::RCP< Teuchos::ParameterList > &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ForModelEvaluator_evaluate_residual(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  Teuchos::RCP< ForModelEvaluator::multivector_type const > *arg2 = 0 ;
  Teuchos::RCP< ForModelEvaluator::multivector_type > *arg3 = 0 ;
  Teuchos::RCP< ForModelEvaluator const > *smartarg1 ;
  Teuchos::RCP< ForModelEvaluator::multivector_type const > tempnull2 ;
  Teuchos::RCP< ForModelEvaluator::multivector_type > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForModelEvaluator::multivector_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< ForModelEvaluator::multivector_type > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::evaluate_residual(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::multivector_type > &) const");;
    try
    {
      // Attempt the wrapped function call
      ((ForModelEvaluator const *)arg1)->evaluate_residual((Teuchos::RCP< ForModelEvaluator::multivector_type const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::evaluate_residual(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::multivector_type > &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::evaluate_residual(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::multivector_type > &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::evaluate_residual(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::multivector_type > &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ForModelEvaluator_evaluate_jacobian(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  Teuchos::RCP< ForModelEvaluator::multivector_type const > *arg2 = 0 ;
  Teuchos::RCP< ForModelEvaluator::operator_type > *arg3 = 0 ;
  Teuchos::RCP< ForModelEvaluator const > *smartarg1 ;
  Teuchos::RCP< ForModelEvaluator::multivector_type const > tempnull2 ;
  Teuchos::RCP< ForModelEvaluator::operator_type > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForModelEvaluator::multivector_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< ForModelEvaluator::operator_type > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::evaluate_jacobian(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::operator_type > &) const");;
    try
    {
      // Attempt the wrapped function call
      ((ForModelEvaluator const *)arg1)->evaluate_jacobian((Teuchos::RCP< ForModelEvaluator::multivector_type const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::evaluate_jacobian(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::operator_type > &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::evaluate_jacobian(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::operator_type > &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::evaluate_jacobian(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::operator_type > &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ForModelEvaluator_evaluate_preconditioner(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  Teuchos::RCP< ForModelEvaluator::multivector_type const > *arg2 = 0 ;
  Teuchos::RCP< ForModelEvaluator::operator_type > *arg3 = 0 ;
  Teuchos::RCP< ForModelEvaluator const > *smartarg1 ;
  Teuchos::RCP< ForModelEvaluator::multivector_type const > tempnull2 ;
  Teuchos::RCP< ForModelEvaluator::operator_type > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< ForModelEvaluator::multivector_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< ForModelEvaluator::operator_type > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::evaluate_preconditioner(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::operator_type > &) const");;
    try
    {
      // Attempt the wrapped function call
      ((ForModelEvaluator const *)arg1)->evaluate_preconditioner((Teuchos::RCP< ForModelEvaluator::multivector_type const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::evaluate_preconditioner(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::operator_type > &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::evaluate_preconditioner(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::operator_type > &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::evaluate_preconditioner(Teuchos::RCP< ForModelEvaluator::multivector_type const > const &,Teuchos::RCP< ForModelEvaluator::operator_type > &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigClassWrapper _wrap_ForModelEvaluator_get_x_map(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  Teuchos::RCP< ForModelEvaluator const > *smartarg1 ;
  Teuchos::RCP< ForModelEvaluator::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::get_x_map() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((ForModelEvaluator const *)arg1)->get_x_map();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::get_x_map() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::get_x_map() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::get_x_map() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_ForModelEvaluator_get_f_map(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  Teuchos::RCP< ForModelEvaluator const > *smartarg1 ;
  Teuchos::RCP< ForModelEvaluator::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::get_f_map() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((ForModelEvaluator const *)arg1)->get_f_map();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::get_f_map() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::get_f_map() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::get_f_map() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_ForModelEvaluator_create_operator(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  Teuchos::RCP< ForModelEvaluator const > *smartarg1 ;
  Teuchos::RCP< ForModelEvaluator::operator_type > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::create_operator() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((ForModelEvaluator const *)arg1)->create_operator();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::create_operator() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::create_operator() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::create_operator() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_ForModelEvaluator() {
  SwigClassWrapper fresult ;
  ForModelEvaluator *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::ForModelEvaluator()");;
    try
    {
      // Attempt the wrapped function call
      result = (ForModelEvaluator *)new ForModelEvaluator();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::ForModelEvaluator()", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::ForModelEvaluator()", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::ForModelEvaluator()", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< ForModelEvaluator >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_delete_ForModelEvaluator(SwigClassWrapper *farg1) {
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  Teuchos::RCP< ForModelEvaluator > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForModelEvaluator::~ForModelEvaluator()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::~ForModelEvaluator()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForModelEvaluator::~ForModelEvaluator()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForModelEvaluator::~ForModelEvaluator()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ForModelEvaluator_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  ForModelEvaluator *arg1 = (ForModelEvaluator *) 0 ;
  ForModelEvaluator *arg2 = 0 ;
  Teuchos::RCP< ForModelEvaluator > *smartarg1 ;
  Teuchos::RCP< ForModelEvaluator > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForModelEvaluator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForModelEvaluator* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "ForModelEvaluator *", "ForModelEvaluator", "ForModelEvaluator::operator =(ForModelEvaluator &)", return )
  smartarg2 = static_cast< Teuchos::RCP< ForModelEvaluator >* >(farg2->cptr);
  arg2 = const_cast< ForModelEvaluator* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< ForModelEvaluator >, SWIGPOLICY_ForModelEvaluator>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_NOXSolver(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType > > *arg1 = 0 ;
  Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType > > tempnull1 ;
  ForTrilinos::NOXSolver< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType > > * >(farg1->cptr) : &tempnull1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::NOXSolver(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType > > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (ForTrilinos::NOXSolver< SC,LO,GO,NO > *)new ForTrilinos::NOXSolver< SC,LO,GO,NO >((Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType > > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::NOXSolver(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType > > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::NOXSolver(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType > > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::NOXSolver(Teuchos::RCP< ForTrilinos::ModelEvaluator< double,int,long long,ForTrilinos::DefaultNodeType > > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< ForTrilinos::NOXSolver<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_NOXSolver_setup(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::NOXSolver< SC,LO,GO,NO > *arg1 = (ForTrilinos::NOXSolver< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::NOXSolver< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForTrilinos::NOXSolver<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::NOXSolver<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::setup(Teuchos::RCP< Teuchos::ParameterList > &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup(*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::setup(Teuchos::RCP< Teuchos::ParameterList > &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::setup(Teuchos::RCP< Teuchos::ParameterList > &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::setup(Teuchos::RCP< Teuchos::ParameterList > &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_NOXSolver_solve(SwigClassWrapper const *farg1) {
  int fresult ;
  ForTrilinos::NOXSolver< SC,LO,GO,NO > *arg1 = (ForTrilinos::NOXSolver< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< ForTrilinos::NOXSolver< SC,LO,GO,NO > > *smartarg1 ;
  NOX::StatusTest::StatusType result;
  
  smartarg1 = static_cast< Teuchos::RCP< ForTrilinos::NOXSolver<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::NOXSolver<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::solve()");;
    try
    {
      // Attempt the wrapped function call
      result = (NOX::StatusTest::StatusType)(arg1)->solve();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::solve()", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::solve()", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::solve()", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT void _wrap_delete_NOXSolver(SwigClassWrapper *farg1) {
  ForTrilinos::NOXSolver< SC,LO,GO,NO > *arg1 = (ForTrilinos::NOXSolver< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< ForTrilinos::NOXSolver< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForTrilinos::NOXSolver<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::NOXSolver<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::~NOXSolver()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::~NOXSolver()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::~NOXSolver()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::NOXSolver< SC,LO,GO,NO >::~NOXSolver()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_NOXSolver_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  ForTrilinos::NOXSolver< SC,LO,GO,NO > *arg1 = (ForTrilinos::NOXSolver< SC,LO,GO,NO > *) 0 ;
  ForTrilinos::NOXSolver< SC,LO,GO,NO > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::NOXSolver< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< ForTrilinos::NOXSolver< SC,LO,GO,NO > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForTrilinos::NOXSolver<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTrilinos::NOXSolver<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "ForTrilinos::NOXSolver< SC,LO,GO,NO > *", "NOXSolver", "ForTrilinos::NOXSolver< SC,LO,GO,NO >::operator =(ForTrilinos::NOXSolver< SC,LO,GO,NO > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< ForTrilinos::NOXSolver<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< ForTrilinos::NOXSolver<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< ForTrilinos::NOXSolver<SC,LO,GO,NO> >, SWIGPOLICY_ForTrilinos__NOXSolverT_double_int_long_long_ForTrilinos__DefaultNodeType_t>(farg1, *farg2);
  
}


} // extern

